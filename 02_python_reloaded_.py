# -*- coding: utf-8 -*-
"""python_reloaded_withoutcode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YowW0dbmKbfyaD0eR1h0R1CG-9oJukx2

<center> <h1 style="background-color:orange; color:white"><br>Python Python Everywhere<br></h1></center>

# `What you can do with Python?`
<h1>fields where you can use Python with Libraries & Frameworks</h1>

|OpenCV| Web Scrapping | Machine Learning | Automation Testing | Web Development | Game Devlopment |
| --- | --- | --- | --- | --- | --- | 
|* Sciki-image |* Selenium |* Pandas |* PyUnit |* Flask |* Pand3d
|* OpenCV |* Beautiful Soup|* Numpy |* PyTest |* Django |* Arcade
|* Pillow |* Requests|* Matplotlib |* Behave |* Web2Py |* PyGlet 
|* Mahotas |* Lxml|* Seaborn |* Robot |* Cheerypy |* PyOpenGl
|* SimpleITK|* Scrapy |* Scikit-learn |* Splinter |* Bottle|* PyGame
|*** |*** |* Scipy |*** |* Pyramid |***
|*** |*** |* Keras |*** |* CubicWeb |***
|*** |*** |* TensorFlow |*** |* Dash |***
|*** |*** |* PyTorch |*** |* Falcon |***
|*** |*** |* Theano |*** |* TurboGears |***

ðŸ“Œ In above table you can see fields like `OpenCV`, `Web Scrapping`, **`Machine Learning`**, `Automation Testing`, `Web Development`, `Game Development`, these are the all field where you can use Python. <br>
Yes application of Python are huge and wide <br>

<center><h5 style="background-color:orange;"><br>Important Libraries for ML and Data Science<br></h5></center>

ðŸ“Œ These are the must know libraryies
* **`Numpy`** - Efficient n-dimensional arrays, Linear Algebra, Random Number capabilities
* **`Scipy`** - Scientifiv computing tools like Calculus, Signal Processing
* **`Pandas`** - Data Reading(multiple formats), manipulation and Cleaning in python
* **`Seaborn`** - Built on top of Matplotlib, provides a high-level interface for drawing attractive and informative charts
* **`Matplotlib`** - Fundamental library for Data Visualization 
* **`StatsModel`** - Statistical models, Statical tests, Statical data exploration
* **`Scikit-learn`** - Basic Data Preprocessing, Machine Learning Library

To learn quick Python I will suggest you to go through:
1. [Basic Python in 1 Hour](https://www.youtube.com/watch?v=kqtD5dpn9C8)
2. [Some more Python](https://www.youtube.com/watch?v=_uQrJ0TkZlc)

As you have gone through above link Lets start learning python basic as your first assignment

<center>    
<div class="list-group" id="list-tab" role="tablist">
  <h2 class="list-group-item list-group-item-action" style="background-color:orange; color:white" data-toggle="list"  role="tab" aria-controls="home"><br>Quick Python Content!<br></h2>  
  
  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#1" role="tab" aria-controls="profile" style="color:orange">Hi Code<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[1]</span></a></h4>
    
  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#2" role="tab" aria-controls="profile" style="color:orange">Variables(Data Types)<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[2]</span></a></h4>
  
  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#3" role="tab" aria-controls="settings" style="color:orange">Assignment Variables & Data Types<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[3]</span></a></h4>
  
  <h4><a class="list-group-item list-group-item-action"  data-toggle="list" href="#4" role="tab" aria-controls="settings" style="color:orange">Operators<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[4]</span></a></h4>
  
  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#5" role="tab" aria-controls="settings" style="color:orange">Assignment Operators<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[5]</span></a></h4> 
  
  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#6" role="tab" aria-controls="settings" style="color:orange">Conditional Statements<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[6]</span></a></h4>

  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#7" role="tab" aria-controls="settings" style="color:orange">Assignment Conditional Statements<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[7]</span></a></h4> 
  
  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#8" role="tab" aria-controls="settings" style="color:orange">Loops<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[8]</span></a></h4>

  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#9" role="tab" aria-controls="settings" style="color:orange">Jump Statements<span class="badge badge-primary badge-pill" style="background-color:orange;color:white">[9]</span></a></h4>
    
  <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#10" role="tab" aria-controls="settings" style="color:orange">Assignment Loops and Jump Statements<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[10]</span></a></h4>
    
   <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#11" role="tab" aria-controls="settings" style="color:orange">Python Data Structures<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[11]</span></a></h4> 
   
   <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#12" role="tab" aria-controls="settings" style="color:orange">Assignment Python Data Structures List<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[12]</span></a></h4> 
    
   <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#13" role="tab" aria-controls="settings" style="color:orange">Assignment Python Data Structures List&Set<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[13]</span></a></h4>
    
   <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#14" role="tab" aria-controls="settings" style="color:orange">Functions<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[14]</span></a></h4>
    <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#15" role="tab" aria-controls="settings" style="color:orange">Lambda Expressions<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[15]</span></a></h4>
    <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#16" role="tab" aria-controls="settings" style="color:orange">Comprehensions<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[16]</span></a></h4>
    <h4><a class="list-group-item list-group-item-action" data-toggle="list" href="#17" role="tab" aria-controls="settings" style="color:orange">Enumerate<span class="badge badge-primary badge-pill" style="background-color:orange; color:white">[17]</span></a></h4>
"""

# ignore this code continue please
from IPython.display import HTML

"""<a id='1'></a><center> <h3 style="background-color:orange; color:white" ><br>Hi, there<br></h3>"""

YouTubeVideo('https://www.youtube.com/watch?v=izgBmCnp1Oc&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=1',width=600,height=300)

# What is your name! Want to print your name! 
print("Hi it's Vinayak raj Mishra")

"""* `()` <= `Parentheses`
* `''` <= `Single Quotes`
* `""` <= `Double Quotes`
* `\n` <= `New_line `
* `#` <= `Used to comment inside code`
"""

# Only use one print function
# \n <= it will break current line 
print("Hello, This is Vinayak Raj Mishra\n Writing assignment of cloudy.ml")

"""<a id='2'></a><center> <h3 style="background-color:orange; color:white" ><br>Variables<br></h3>"""

# variable-1
YouTubeVideo('https://www.youtube.com/watch?v=YdDfEbaUPJs&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=2',width=600,height=300)

# variable-2
YouTubeVideo('https://www.youtube.com/watch?v=gOcRxdGovhc&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=3',width=600,height=300)

# define variables named as with values: mukesh 7, z 6, rohan 5, longitude 4,
mukesh = 7
z = 6
rohan = 5
longitute = 4

# print required variable
mukesh

"""Variable Assignment:
**`Variable_Name = Value`**

Variables Naming Rules:
* `Python is case-senstive` => x=5 is different from X=5 (one is lowe and other is upper case)
* `var name can't start with special character except underscore(_)` => _X = 7 is `valid`, @X = 7 is `invalid`
* `var name can't start with number` => 9X = 7 is `invalid`, X9 = 7 is `valid`
* can't use `keywords` as a variable name
    *

# * **`Declaring a Variable`** <br>
"""

# declare 4 variables with values as: ur_age 21,ur_weight 50.6, ur_first_name = 'Mukesh',ur_last_name = "Manral", TrueOrFalse compare if  ur_last_name == ur_first_name
ur_age, ur_weight, ur_first_name, ur_last_name = 21,50.6,'Mukesh','Marnal'
trueorfalse= ur_last_name == ur_first_name 
trueorfalse

"""# * **`Data Type(Type of variable)`**

| Name | Type | Description |
| ---- | ---- | ----| 
|Integers | int | Integer number, like 34,-56 ...|
|Float | float | Decimal number, like 3.4,-5.6 ...|
|String| str | Ordered sequence of characters, like 'your name' |
|Boolean |bool |Logical values indicating True or False only |
"""

# print type of ur_age,ur_weight,ur_first_name,ur_last_name variables
print(type(ur_age))
print(type(ur_weight))
print(type(ur_first_name))
print(type(ur_last_name))
print(type(trueorfalse))

# print values of ur_age,ur_weight,ur_first_name,ur_last_name variables
print(ur_age)
print(ur_weight)
print(ur_first_name)
print(ur_last_name)

# make 2 variables with values as: ur_first_name 'Mukesh',ur_last_name'Mukesh' 
ur_first_name, ur_last_name ="Mukesh", "Mukesh"
# make a variable TrueOrFalse which will have comparison of variables ur_last_name == ur_first_name 
TrueORFalse = ur_last_name == ur_first_name
print(TrueORFalse)

# print variables named as (your name and your age)
print(f"Name is: {ur_first_name} and age is: {ur_age}")

"""# *How Variables works in Python
[To see how python code is being executed internally](https://pythontutor.com/visualize.html#mode=display)
"""

# quick variables swap
# define 3 variables with values as :x 10, y = x,x 3 
x = 10 
y = x
x = 3
# print x,y
print(x)
print(y)

"""
<a id='3'></a><center> <h3 style="background-color:orange; color:white" ><br>Assignment Variables & Data Types<br></h3>"""

# Data Structures
YouTubeVideo('https://www.youtube.com/watch?v=R0yDN07Jw_c&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=4',width=600,height=300)

"""ðŸ“Œ `When you create a variable you keep some space in memory. These memory locations are then used to store values`"""

# define a variable name "x" and assign value 777 to it
x = 777

"""* To view some data on screen, python have `print` function
    * Using `print` function we can control view on output screen

"""

# print value of variable x
x

"""# *Identifiers in Python
* Like Variables, we have to define `Functions`, `Classes` etc in python
    * Naming them helps to differentiate one entity from another
* All these names given to these entities are known as `Identifiers`. 
* Python have some rules to define Identifiers


***Rules of Writing Identifiers***

* Python is case sensitive language.
* Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore _. 
    * Names like myVariable, var_1 and print_this, all are valid example.
* An identifier cannot start with a digit
* `1variable` is invalid, but `variable1` is perfectly fine
* We cannot use special symbols like !, @, #, $, % etc. in our identifier. `_` is allowed
* ***`Keywords` cannot be used as identifiers =>  `Keywords` are the reserved words in Python***

---
***Keywords in Python***

---

* `False`
* `class`
* `finally`
* `is`
* `return`
* `None`
* `continue`
* `for`
* `lambda`
* `try`
* `True`.. etc

# ðŸ“Œ Type Conversion


***Python defines type conversion functions to directly convert one data type to another.***
"""

#convert float to integer

#1. make a variable named as my_weight_float with datatype float and value 26.33333
my_weight_float = 26.33333
#2. make another var named as my_weight_int change above variable datatype to int 
my_weight_int=int(my_weight_float)
#3. print data type of my_weight_float and my_weight_int
print(type(my_weight_float))
print(type(my_weight_int))
#4. print my_weight_float and my_weight_int
print(my_weight_float)
print(my_weight_int)

""" âž• if we try to add string and integer number, it will give an error"""

# make a variable name with value as: adding_string_and_number '3' + 7
adding_string_and_number = '3' + 7

# convert above string '3' to integer and then add both '3' and 7 and save in variable named as  adding_string_and_number
# called type conversion: string to int
adding_string_and_number=int('3')+7

# print variable adding_string_and_number
print(adding_string_and_number)

# make two variables with values as: ur_money 18 and frnd_money 21 
ur_money ,friend_money= 18, 21
# now use f string in print to see how much mony you and your friend have
print(f"This is friend money: {friend_money}")
print(f"This is your money: {ur_money}")

# swap your money with friend money values
ur_money, friend_money = friend_money, ur_money

# now use f string in print to see how much mony you and your friend have now after swap
print(f"This is friend money: {friend_money}")
print(f"This is your money: {ur_money}")

"""# *Python Data Structures

| Name | Type | Description |
| ---- | ---- | ----| 
|List | list | Ordered sequence of various data types, like [34,'name',3.4]|
|Dictionary | dict | Unordered sequence of `key-values pair`, like {'age':34,'age1:56'}|
|Tuples | tup | Non-mutable sequence of data type, like (34,56,'name')|
|Set |set | Collection of unique elements, like ('id','last_name')|

|Type|Mutability|Comments|
|----|----|----|
int |immutable|
float|immutable|
string|immutable|
bool |immutable|
frozenset|immutable|immutable version of set
tuple|immutable|immutable version of list
list|mutable|
set |mutable|
dict|mutable|

ðŸ’« `immutable` => `can't be changed` <br>
ðŸ’« `mutable` => `can be changed`

---
### Proff that string is immutable
"""

# can't reassign  

# make a varible with value as: where_to_learn_MLandDL 'CloudyML'
where_to_learn_MLandDL = 'CloudyML'
# print type of variable
print(type(where_to_learn_MLandDL))
# acess Letter M
where_to_learn_MLandDL[-1]='m'

# make a variable with value as: where_to_learn_MLandDL  'CloudyMLDL'
where_to_learn_MLandDL = 'CloudyMLDL'

# try to loop in range of (0,10) and try to see memory location of letter-L of string-'CloudyMLDL' is same
for i in range(0,10):
  print(id(where_to_learn_MLandDL[i]))

id(where_to_learn_MLandDL[-1])==id(where_to_learn_MLandDL[-3])
# If you dont know loop go throug videos first then do this

"""---"""

# list
YouTubeVideo('https://www.youtube.com/watch?v=VGqMziKr9wM&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=5',width=600,height=300)

"""**`List`** (ordered datastructure)
* Ordered collection of values, each element is seprated by a comma, use of square bracket for denotion of list
Ordered property is the most important aspect of list, lets see how:
* Python remembers the order of elements of a list
Data type connot store different kind of values in it, but list can
"""

# declare a list named as ur_data_Lis having variables age,weight,name with values as 21,50.6,'Mukesh Manral'
age, weight, name=21,50.6, 'Mukesh Marnal'
ur_data_lst=[age, weight, name]

# declare a dictionary named as ur_data_dictionary having keys as age,weight, first_name values as 21, 50, Mukesh
ur_data_dictionary={ 'age': 20, 'weight':50.6, 'first_name':'Mukesh' }

# declare a tuple named as ur_data_tuples having values 21,50.6,'first_name'
ur_data_tuples = (21, 50.6, 'Mukesh')

# declare a set named as ur_data_set having value as Mukesh
ur_data_set = {'Mukesh'}

# see datatype of ur_data_List, ur_data_dictionary, ur_data_tuples , ur_data_set variables
print(type(ur_data_lst))
print(type(ur_data_dictionary))
print(type(ur_data_tuples))
print(type(ur_data_set))

"""<a id='4'></a><center> <h3 style="background-color:orange; color:white" ><br>Operators<br></h3>"""

# Operators
YouTubeVideo('https://www.youtube.com/watch?v=CLqw5KZZ8Dg&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=10',width=600,height=300)

"""`Operators`: Symbols that represent mathematical or logical tasks 

Example:<br>
`700` `+` `77`<br>
* `+` <= Operator
* `700` & `77` <= Operands

# Types of Operators
1. `Arithmetic Operators`
2. `Comparison Operators`
3. `Logical Operators`

# **1. `Arithmetic Operators`**

|Task | Symbol|Example|
|---|---|----|
|Addition | + | 700 + 77 = 777|
|Substraction | - | 778 - 1 = 777|
|Multiplication | * | 1 * 777 = 777|
|Division | / | 13 / 2 = 6.5|
|Floor Division(ignores decimal \ gives quotient) | // | 13 // 2 = 6|
|Modulo(gives remainder)| % | 13 % 2 = 1|
|Exponent(raise to the power) | ** | 13**2 = 169 |

# **2. `Comparison Operators`**

|Task | Symbol|
|---|---|
|Less than | < |
|Less than or equall to | <= | 
|Equall to | == | 
|Greater than | > | 
|Greater than or equall to | >=|
|Not equall to | != |

# **3. `Logical Operators`**

|Task | Symbol|Description|
|---|---|---|
|and | 1 < 2 and 2 < 3 => True |True only if both comparison are true |
|or | 1 < 2 or 2 > 3 => True|True if either of the comparison are true  |
|not | not 1 > 2 => True|(flips results)True if comparison is False and so on.. |

<a id='5'></a><center> <h3 style="background-color:orange; color:white" ><br>Assignment Operators<br></h3>
"""

# Initialize variables [x,y,z,zz] with values 
## x as 7 =>int ,
## y as 77 =>int, 
## z as 77.7 => float, 
## zz as 'Hi' => string
x,y,z,zz =7,77,77.7,'Hi'

"""# **1. `Arithmetic Operators`**"""

# add x and z
x+z

# subtract z and y
z-y

# Multiply x and z
x*z

# Exponent (raise the power or times) x times z
x**z

# division on x and z
x/z

"""`//` => divides and returns integer value of quotient
* It will dump digits after decimal
"""

# floor division(ignores decimal) on x and z (gives quotient)
x//z

# Modulo(gives remainder) on x and z
x%z

"""# **2. `Comparison Operators`**"""

# comapre and see if x is less then z 
# can use '<' symbol

x<z

# check the type of above comaprison where it says comapre and see if x is less then z 
type(x<z)

"""* `Bool` => takes two values, either `True` or `False`"""

# compare and see if x is less then or equall to z
# can use '<=' symbol
x<=z

# comapre and see if x equall to z
# can use '==' symbol
x==z

# comapre and see if x is greater than z
# can use '>' symbol
x>z

# comapre and see if x is greater than or equall to z
# can use '>=' symbol
x>=z

# comapre and see if x is Not equall to z
# can use '!=' symbol

x!=z

"""# **3. `Logical Operators`**"""

# compare if 108 is equall to 108, 21 is equall to 21 using logical and 
# equall to => '=='
# logical and => and
108 == 108 and 21 ==21
  # in and both condition must be True to get a True

# how above condition can give False as output show all thouse conditions
 # in and both condition must be True to get a True
108!=108 and 21==21

# compare if 108 is equall to 108, 21 is equall to 11 using logical or
# equall to => '=='
# logical or => or
108 == 108 or 21 ==11
 # in or Only one condition need to be True to get a True

# this is for you understand it
(108 == 108) or (21 == 11) or (108 <= 11)

"""
<a id='6'></a><center> <h3 style="background-color:orange; color:white" ><br>Conditional Statements<br></h3>"""

# Conditions
YouTubeVideo('https://www.youtube.com/watch?v=CLqw5KZZ8Dg&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=11',width=600,height=300)

"""# 1. **`if`--- `else`** => to handle single condition <br>
# 2. **`if`--- `elif`--- `else`** => to handle Multiple condition

`Why do we need conditional Statements?` <br>
Say you want to buy a ML course and to decided you buy it or not to by it based on some condition,=> if you have more then 2k buy, if you dont have more then 2k dont buy!! 

* Two Variable you will use `ML course` and `money` 
* One comparison `money > 2k`
For ML course if `money > 2k` => you have more money then 2k => condition is True => buy course => if condition is False i.e. you have less money then 2k then dont buy the course

|Pseudo Code for above will be| Python Code for Pseudo code|
|----|----|
Check if money > 2k | if money > 2000:
then ML course = 'buy' |....  ML course = 'buy'
else Ml course = 'dont buy'| else:
 --  | ....ML course = 'dont buy'

if condition:
    statement
else:
    statement

`Observe in Python code:` 
* `if` => statement in python
* `else` => statement in python
* `:` => colon => denotes start of if block i.e. any line written after colon belong to if condition
* `....` => see then as indentation i.e. 4 spaces => indentation indicates all code belong to only if and then another indentation indicates code for only else block
"""

# make variable with value as : money 100000
money = 100000
# see output of money > 2000 
money > 2000

# see above Python code for Pseudo code and write that into python code

# assign money variable value of 100000 
##### say you have this much ammount in your account

# start of if condition
if money>=2000:
    print('buy ML course')
else: 
    print('you have less money then 2000 in your account then else will work for now only if is working')

# make variable with value as : money 100
money = 100
# see output of money > 2000
money>2000

# assign money variable value of 100
#### say you have this much ammount in your account

# start of if condition
if money>=2000:
    print('buy ML course')
else: 
    print('you have less money then 2000 in your account then else will work for now only if is working')

"""# 2. `Multiple Condition` i.e. use of **`if`--- `elif`--- `else`**
Say you have bought ML course, but now you want certification and internship here includes more then 1 condition maybe 2 or 3, lets see for conditions:
* if your test score more then 80 then you will get certification of A grade
* if your test score more then 60 then you will get certification of B grade
* for rest not get anything

|Pseudo Code for above will be
|----|
Check if score > 80
if yes print('A grade')
Otherwise check if score > 60
if yes print('B grade')
For every other situation print('not getting anything')
"""

# python code for above Pseudo Code will be
your_test_score = input('What is your test score(check for 10, 70, 90): ') #taking input from you use of input()
your_test_score =  int(your_test_score)

if your_test_score > 80:
    print('A grade')
elif your_test_score > 60 and your_test_score <80:
    print('B grade')
else:
    print('Nothing for you')

"""`Understand above Flow`:
* check for if statement if true close, if not true
* check for elif, if elif condition is true go close, if not true
* go ot else any way
* [See how this code is being executed internally](https://pythontutor.com/visualize.html#mode=display)
* copy above code there

<a id='7'></a><center> <h3 style="background-color:orange; color:white" ><br>Assignment Conditional Statements<br></h3>

# ðŸ“ŒðŸ“Œ Indentation in Python

***Before we start Conditional Statements, let's have a look at `indentation` in Python.***

## `INDENTATION`
* Indentation means `(spaces and tabs)` that are used at beginning of any statement
* Statements with same indentation belong to same group also called as `suite`.
"""

# this is how wrong indentation gives you error  (commet can be written by using => #)
if (2 == 2):
  print('True Statement') # IndentationError

"""**`Take an input from a user in variable input_ and print "Even" if number is divisible by 2, otherwise print "Odd"`**"""

# take input from user by using input function in variable named as input_
num = (input('Enter a number: '))

# by default type is string, so we need to convert type first into int
input_ = int(num)

if input_%2==0:
    print("Even")
else:
    print("Odd")

"""**`Take input from user in variable x and print "`Grade A`" if y is greater than 90, "`Grade B`" if y is greater than 60 but less than or equal to 90 and "`Grade F`" Otherwise`**"""

# take input from user by using input function
x = input('Enter your marks: ')

# by default type is string, so we need to convert type first
x = int(x)

if x> 90:
    print("Grade A")
elif x > 60:
    print("Grade B")
else:
    print("Grade F")

"""
<a id='8'></a><center> <h3 style="background-color:orange; color:white" ><br>Loops<br></h3>"""

# Loops
YouTubeVideo('https://www.youtube.com/watch?v=56-IOucIwAU&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=12',width=600,height=300)

"""for iterating_variable in sequence:
    statement(s)

|Loop Type|Description|
|----|-----|
|`for in` loop | repeats a statement or group of statements finite number of time |
|`while` loop | tests condition before executing loop body, repeats a statement or group of statements while a given condition is true |
|`nested` loop  | loop inside a loop |

# **When to use `while` or `for` loops??** <br>
Say your Girlfriend or Boyfriend is mad at you and they asked you to say sorry, but there are two more condition here given by them:
* say sorry 1000 times, now you know end point i.e. 1000 => `use for loop`
* say sorry untill I say I love you, now you dont know end point, maybe she/he will never say I love you. => `use while loop` it will stop saying sorry untill condition is not met

1. `We use for loop when we want to run a block of code certain number of times`
2. `Code in while clause will be executed as long as while statementâ€™s condition is True`

# `Why we need Loops?` <br>
Say your Girfriend/Boyfriend is Mad at you and she want you to write sorry 1000 times. What to do now????? Write a `for loop`

|Pseudo Code for above will be
|----|
print 'Sorry My love' (repeat 1000 times)

for iterating_variable in sequence:
    statement(s)
"""

for iterating_variable in range(10):
    print(iterating_variable)

# print 'ðŸ”¥ Sorry My LoveðŸ”¥' 10 times using for loop

# for now i am giving range of 10 you can give any number you want
for i in range(10):
  print("ðŸ”¥ Sorry My LoveðŸ”¥")

"""`10` => `stoping criteria` of, for loop"""

# Syntax of for loop
"""
for iterating_variable in sequence:
    statements(s)
"""

"""* `in` => keyword
* `sequence` => on which to itterate
* `:` => colon , start of for loop

|Pseudo Code `while` loop|
|---|
while reply != 'I love you':
....keep repeating until
....caparison gives False

`!=` = not equall to => `behaves as a stoping criteria`
"""

# Syntax of while loop
"""
while comparison:
    statements(s)
"""

# while loop

# save 0 in variable number
number = 0

# print bellow result using while loop
while number<7:
  print(number)
  number+=1

"""* Initialized variable `number = 0` and then increment it's value in each iteration
* Loop will only continue to run only if value is less than 7

# 3. **`Nested loop`**
"""

# run it see the output
for outer_loop_number in range(1,3):
    print(outer_loop_number)

# run it see the output
for inner_loop_character in "CloudyML":
    print(inner_loop_character)

# print this patern using outer and inner loop 
i = 1
while i<=2:
  for j in "CloudyML":
    print(i, end=' ')
    print(j)
  i+=1

"""`See For each step in outer loop, inner loop exectues completely`"""

# think what will be the output of this code and then run it
# comment why this out is the way it is 

for letter in 'cloudyml':
    if (letter == 'c') or (letter == 'o'):
        print('m', end= ' ')
    else:
        print(letter,end= 'x')

''' every c is replaced by m and a space
    and every o is also replaced by m and a space
    all the other letters will be writen as it is followed by x

    'c' = 'm '
    'l' = 'lx'
    'o' = 'm '
    'u' = 'ux'
    'd' = 'dx'
    'y' = 'yx'
    'm' = 'mx'
    'l' = 'lx'

    combining them :
        'cloudyml' = 'm lxm uxdxyxmxlx'
'''

"""Your Comment: => -------"""

# think what will be the output of this code and then run it
# comment why this out is the way it is 

num = 10

while num > 5:
    print(num,end= ' ')
    
    num = num - 1
    if num == 8:
        num = 2

'''
    at first iteration:
                        num =10,  10>5 {condition True}
                            value of num is printed with a space
                            num = 10 -1 = 9
                            num is not equal to 8  : so below code is not considered
    at next iteration:
                        num = 9,  9>5 {condition True}
                            value of num is printed with a space
                            num = 9 -1 =8
                            num is quaeal to 8 : num value is set as 2
    at next iteration: 
                        num = 2,  2<5 {condition False}
                            Loop Terminated                          


'''

"""Your Comment: => -------

<a id='9'></a><center> <h3 style="background-color:orange; color:white" ><br>Jump Statements<br></h3>
"""

# Statements-1
YouTubeVideo('https://www.youtube.com/watch?v=znhhfYiFrzI&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=13',width=600,height=300)

# Statements-2
YouTubeVideo('https://www.youtube.com/watch?v=znhhfYiFrzI&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=14',width=600,height=300)

"""# **`Type of Jump Statements`** <br>
1. `Break Statement`
2. `Continue Statement`
3. `Pass Statement`

Using for loops and while loops in Python allow you to automate and repeat tasks in an efficient manner.

* But sometimes, an external factor may influence the way your program runs. When this occurs, you may want your program to `exit a loop completely`, `skip part of a loop before continuing`, or `ignore that external factor` 

`You can do these actions with **Break** and **Continue** Statements`
"""

'''
pass

break

continue
'''

"""# 1. **`Break Statement`**

"""

# observe the output
for num in range(10):
    print(num)

# example that uses break statement in a for loop

num = 0
for num in range(10):
    if num == 5:
         break 
    print('The number is' + str(num))

print('Out of loop')


# Explain Why the output is the way it is

"""Your Comment: => ------- 

When for loop is setted till range 10, at num = 5 we written break , it just break the loop

# 2. **`Continue Statement`**
"""

# Using same `for loop program` as in Break Statement section above, weâ€™ll use a continue statement rather than a break statement
num = 0

for num in range(10):
    if num == 5:
        continue #keep running if num == 5
    print('The number is' + str(num))

print('Out of loop')


# Explain Why the output is the way it is

"""Your Comment: => -------

When num == 5 'continue' statement will skip the execution of this iteration and then again fall bak to the same loop and continue its execution 
"""

# Using same code block as above, letâ€™s replace break or continue statement with a pass statement
num = 0

for num in range(10):
    if num == 5:
        pass    # pass then
    print('Number is ' + str(num))
print('Out of loop')


# Explain Why the output is the way it is

"""Your Comment: => -------

When we do not have anything to perform at num==5 we writen pass.
Because pass just passes the code to further execution and do not make any action

<a id='10'></a><center> <h3 style="background-color:orange; color:white" ><br>Assignment Loops and Jump Statements<br></h3>

# ðŸ’¬ ***Problem Statement-1:***

* User will enter password which is set to be `qwert`
* If password matches, print ***`Welcome to CloudyML Course!!`*** else print ***`Wrong Password!!`*** and user will re-enter password
* In `fourth` trial, it will print ***`One Last Trial left!!!`***

Hint: `Break Statement` can be used
"""

password = "qwert" 

for i in range(4):
  if i==3:
    print("One Last Trial left!!!")
  input_password = input("Enter your pasword: ")
  flag = password == input_password
  if flag == True:
    print("Welcome to CloudyML Course!!")
    break
  else:
    print("Wrong Password!!")

""".....

# ðŸ’¬ ***Problem Statement-2:***

* Enter password which is an OTP set to be `1008`
* If OTP matches, It will ask user to provide details like ***`Enter Your Name:`*** and ***`Enter Your City:`*** and user will re-enter OTP
* In `fourth` trial, it will print ***`One Last Trial left!!!`***

`Hint:` Continue Statement can be used
"""

OTP = 1008
for i in range(4):
  input_otp = int(input("Enter Your OTP: "))
  if input_otp == OTP:
    name = input("Enter Your Name: ")
    city = input("Enter Your City: ")
    break
  if i == 2:
    print("One Last Trial Left!!!")

"""<a id='11'></a><center> <h3 style="background-color:orange; color:white" ><br>Python Data Structures<br></h3>


"""

# Data Structures
YouTubeVideo('https://www.youtube.com/watch?v=R0yDN07Jw_c&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=4',width=600,height=300)

"""Existing Data Type: int, float, bool, str

Problem with Existing Data Type:
* Only single data type can be stored in a variable i.e. either int or decimal or str
* To store more data we need more variables
    * Eg: You have 100 name and age then you have to make 200 variables, valid for condition if you are not using DataStructure
    
    
`Data Structure Solves` above problem

# **`Properties of Data Structure:`**
* Efficient Storage for large data
* Should allow Manipulation/Operations on data
* Should mantain underlying relationship of data
If these three properties are available then you can call it a Data Structure


# `Types of Data Structures:`
* `List` => ordered => elements seprated by comma => enclosed with square brackets-[]
* `Tuple`
* `Set`
* `Dictionary`

|Data Structures type|Mutable|Comments|Indexing|Ordered|Duplicacy|
|----|----|----|----|----|----|
frozenset|immutable|immutable version of set|- |- |- |
tuple ()|immutable|immutable version of list| possible|yes |allowed |
list []|mutable|-|possible |yes | allowed |
set {}|mutable| -|not |no |not |
dict {key:value}|mutable|-|possible |no |not  |

ðŸ’« `immutable` => `can't be changed` <br>
ðŸ’« `mutable` => `can be changed`

---
"""

# List
YouTubeVideo('https://www.youtube.com/watch?v=VGqMziKr9wM&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=5',width=600,height=300)

"""
# **`List`**"""

# make a list, name it as names with values ram','ohm','da','ada','asdasd'
name  = ['ram', 'ohm', 'da','ada', 'asdasd']
# make a list, name it as roll_no with values 21,23,435,65,565,656
roll_no = [21,23,434,54,565,656]
# make a list, name it as scores  with values 23,2323,2323,234324,3423
scores = [23,2323,2323, 234324, 3423]

# make a list with Single data type - str
# name of list names_list with values as 'krishna','mahadev','surya'
name_list = ['krishna', 'mahadev', 'surya']
# print type of names_list
type(name_list)

# make a list with Mixed data type - str and int
# name of list names_list with values as 'krishna','mahadev','surya',108,11,21
name_list = ['kishna', 'mahadev', 'surya', 108,11,21]
# print type of names_list
type(name_list)

# access output element 
name_list

"""`List Indexing:`


|`Values`|1|2|3|4|5|6|7|8|9|10|
|---|---|---|---|---|---|---|---|---|---|---|
|`Indexing` |0 |1 |2 |3 |4 |5 |6 |7 |8|9|
|`Negative Indexing`| -10 |-9 |-8 |-7 |-6 |-5 |-4 |-3 |-2 |-1|
"""

# extract single element i.e. last one using Negative Index (first element)
name_list[-1]

# extract single element using Index (first element)
name_list[0]

# extract sequence of elements using Index (first 3 elements)
name_list[0:3]
  #=> [start index:end index] => exclude end index

"""## Membership Operators
To check if particular element is present in list or not
* Using `in` or `not in` to get answers of these type of queries 
"""

# see names_list data

# see if 'mukesh' is in  names_list
'mukesh' in name_list

# see if 'rawan' is notin names_list
'rawan' not in name_list

"""## Adding to List
* Adding a single element: `append()` => add at the end of the list
* Adding multiple elements (adding list in list): `extend()`

# Use of .append()
"""

#see again names_list elements

# #see again names_list list elements
print(name_list)

#appending 'bhagwan' to list names_list
#using append()
name_list.append('bhagwan')

# print list after appending
print(name_list)

# append 3,'ok' values as a list of list
 #<= it will append a list inside a list
name_list.append([3,'ok'])
# print names_list
print(name_list)

"""# Use of .extend()"""

# extend names_list with values 6,'one more'
values = [6,'one_more']
# print list after .extend()
name_list.extend(values)
print(name_list)

"""## Deleting from list
* `.remove()` => delete element by its value
* `del` => delete element by index : indexing start from 0

# Use of .remove()
"""

# see names_list
name_list

# remove one more from names_list
name_list.remove('one_more')
# print names_list
name_list

"""
# Use of del"""

# see names_list
name_list

# del 7 from names_list
del name_list[7]
# print names_list
name_list

"""## Iterate through list"""

# interate through list elements 
for element in name_list:
   print(element)

"""## Some pre-defined method on List

"""

# see names_list
name_list

# find length of list names_list
len(name_list)

# reverse a list names_list
name_list= name_list[::-1]
# see names_list
name_list

# sort a list see condition when it is not possible
name_list.sort()
name_list

# make a list named as numbers_list with values as [51,101,11,21]
number_list = [51,101,11,21]
# sort list numbers_list
number_list.sort()
# see numbers_list output
number_list

# another way of sorting list

# use sorted to short list named as sample_list with values as [51,101,11,21]
sample_list = [51,101,11,21]
sorted(sample_list)

"""# Nested List"""

# defining a sample nested list named as list_of_list and vakues  [111, 201, [11, 21, 121], ['Aman', 'Bobo', 'Canada'], 'Wangu', ['Aanaya', 'Annu', 'Amanda']]
list_of_list = [111,201,[11,21,121],['Aman', 'Bobo','Canada'], 'Wangu',['Ananya', 'Annu','Amanda']]
# print list_of_list
list_of_list

# find length of nested list
len(list_of_list)

# aces third element of list_of_list
list_of_list[2]

# accessing 2nd element of the third element of the primary list named  as list_of_list
list_of_list[2][1]

"""<a id='12'></a><center> <h3 style="background-color:orange; color:white" ><br>Assignment Python Data Structures List<br></h3>

# ðŸ’¬ **List Problem Statement:**

Say CloudyML conducted an assessment test to hire a Data Scientist <br>
Candidates were evaluated on 5 different subject `Statistics`, `Python`, `SQL`, `ML`, and `DeepLearning` <br> 
`Help CloudyML team to find out answers of following questions` <br>

ðŸ’¡ `Find out Who scored highest marks in Python?`
* Step1: Select name of student and marks in Python
* Step2: Store filtered name and marks in another list
* Step3: Sort list. (Kept marks as first index)
* Step4: Get final index of sorted list
"""

#### Marks of 5 different subjects out of 100 are as ####

student_marks = [['Name',['Statistics','Python','SQL','ML','DeepLearning']],
                 ['Ananya',[41, 34, 45, 55, 63]],
                 ['Akash',[42, 23, 34, 44, 53]],
                 ['Rahul',[32, 23, 13, 54, 67]],
                 ['Mukesh',[23, 82, 23, 63, 34]] ]

# print student_marks
student_marks

# access first index of list student_marks
student_marks[0]
student_marks[1][0]
student_marks[1][1][1]

"""* Slice list from second element"""

# access first index of list student_marks[1]
student_marks[1]

"""See, each element in list from Index-1 contains 2 elements
* first is `Name` 
* second is `list of marks`
"""

# acess first student name
student_marks[1][0]

# acess ananya marks
student_marks[1][1]

"""Now, student marks are in order **`Statistics`**, **`Python`**, **`SQL`**, **`ML`** and **`DeepLearning`**. and we need to access value at Index-1 to get marks in subject => **`Python`** """

# observe the output commend why this is the way it is
student_marks[1][1][1]

"""See above `Ananya` Python marks

***Now Solving Problem step after step***
* `Who scored highest marks in subject Python? `  


***Step1: Select name of student and marks in subject Python***
"""

for i in range(1,5):
  print(student_marks[i][0], student_marks[i][1][1])

"""***Step2: Store filtered Name and Marks in another list***"""

new_lst = []
for i in range(1,5):
  new_lst.append([student_marks[i][0], student_marks[i][1][1]])
new_lst

"""***Step3: Sort list (Keep marks as first index)***"""

def sort_list(lst):
  lst.sort(key = lambda x:x[0])
  return lst

sort_list(new_lst)

"""***Step4: Get final index of sorted list with student name having max marks in Python subject***"""

def highest_marks(lst):
  highest = lst[0][1]
  name = lst[0][0]
  for i in range(len(lst)):
    if highest < lst[i][1]:
      highest = lst[i][1]
      name = lst[i][0]
    else :
      highest = highest
  return name, highest

print(highest_marks(new_lst))

"""Got answer of first question. Mukesh has scored highest marks in subject Python
* You can also do it using loop do it if you want to

-----
"""

# Tuples
YouTubeVideo('https://www.youtube.com/watch?v=I6UH_prRboE&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=6',width=600,height=300)

"""# **`Tuple`** <br>

Benefit of using tuples:<br>
* Faster then list
* Provide security over updation => once created cannot be modefyied like list
* Can be used as key for dictionarie
* We generally use tuple for heterogeneous(different) datatypes and list for homogeneous (similar) datatypes
* Since tuples are immutable, iterating through tuple is faster than with list. So there is a slight performance boost
* Tuples that contain immutable elements can be used as a key for a dictionary. With lists, this is not possible
* If you have data that doesn't change, implementing it as tuple will guarantee that it remains write-protected
* We cannot edit/update or delete elements from the tuple
"""

# make a variable names as data_tuple with values 'krishna', 'mahadev', 'surya', 108, 11, 21, 'bhagwan', 6
data_tuple = ('krishna', 'mahadev', 'surya', 108,11,21,'bagawan',6)
# print data_tuple
print(data_tuple)
# print type of data_tuple
print(type(data_tuple))

# make a variable named as data_tuple with values as 1,2,3,4,5
data_tuple = (1,2,3,4,5)
# Acess element at 2nd Index of data_tuple  #<= indexing work same as list as tuple is ordered data structure
data_tuple[2]

# think what will be the output of this code then run it
data_tuple = ( (1,2,3,4,5),
             (4,5,3,4,5),
             (3,7,8,9,6) )

data_tuple[2][2:4]



# Views on why the output is the way it is

"""data_tuple[2] means third tuple 

data_tuple[2][2:4] means in third tuple elements from index 2 to one less than 4
"""

# find Index of any element, here index of 3 
data_tuple = (1,2,3,4,5)
   # <= 3 is at 2nd index as indexing start at one
data_tuple.index(3)

# count of an element 
data_tuple = (1,2,3,4,5)
# print how many time 4 have come 
print(data_tuple.count(4))

data_tuple = (7,2,7,4,7)
# print how many time 7 have come 
print(data_tuple.count(7))

# iterate through elements of tuple similar to list using for 
data_tuple = (7,2,7,4,7)
for element in data_tuple:
  print(element)

# slicing in tuple
data_tuple = (5,2,7,4,6)

# slice and print first 2 element
#<= exclude 2nd Index
print(data_tuple[:2])
# defining start pont as 2 and end poin as 4 to slice
print(data_tuple[2:4])


# by using count method on slice see how many time 2 comes
#<= count of 2 if present
print(data_tuple.count(2))

# index method on slice
print(   data_tuple[1:4].index(2)   ) #<= index of 2

# Tuple immutable (cant update or delete elements from tuples)
## this is one of the reasons it is fast in comparison to list
data_tuple[2] = 1 #<= update at index-2 with 1, it will give error

data_tuple

del data_tuple[0] #<= del at index-0, again error

"""<a id='13'></a><center> <h3 style="background-color:orange; color:white" ><br>Assignment Python Data Structures List&Set<br></h3>

# ðŸ’¬ **List Problem Statement:**

Say CloudyML conducted an assessment test to hire a Data Scientist <br>
Candidates were evaluated on 5 different subject `Statistics`, `Python`, `SQL`, `ML`, and `DeepLearning` <br> 
`Help CloudyML team to find out answers of following questions` <br>

ðŸ’¡ `Find out Who scored highest marks in Python?` <br>
ðŸ’¡ `Find out average marks scored in subject SQL?` <br>
ðŸ’¡ `Find out scored highest percentage of marks?` <br>
ðŸ’¡ `If considered only top-4 subjects of a candidate, then who scored highest percentage of marks?` <br>
"""

### Find out Who scored highest marks in Python? ###
# student marks nested list
student_marks = [['Name',['Statistics','Python','SQL','ML','DeepLearning']],
                 ['Ananya',[41, 34, 45, 55, 63]],
                 ['Akash',[42, 23, 34, 44, 53]],
                 ['Rahul',[32, 23, 13, 54, 67]],
                 ['Gyan',[23, 82, 23, 63, 34]],
                 ['Pranav',[21, 23, 25, 56, 56]] ]

# Find out Who scored highest marks in Python? using for loop, soorted and slicing
python_marks=[]
for x in student_marks[1:]:
  name_python = x[0]
  marks_python = x[1][1]
  python_marks.append([marks_python, name_python])

python_marks_sorted = sorted(python_marks)
python_max_marks = python_marks_sorted[-1]
python_max_marks

### Find out average marks scored in subject SQL? ###
total_sql_marks = 0
for i in range(1,len(student_marks)):
  total_sql_marks+=student_marks[i][1][2]
avg_sql_marks = total_sql_marks/(len(student_marks)-1)
print('avg_of_SQL_marks:',avg_sql_marks)

### Find out scored highest percentage of marks? 
print('Maximum marks for each subject:70 \nNumber of Subjects:5')
topper_percent=['x',0]
for i in range(1,len(student_marks)):
    if topper_percent[1]<sum(student_marks[i][1])*100/5/70:
        topper_percent[0] = student_marks[i][0]
        topper_percent[1] = sum(student_marks[i][1])*100/5/70
print(f'Topper percentage is: {topper_percent[1]} %  Name is: {topper_percent[0]}')

### solv for `If considered only top-4 subjects of a candidate, then who scored the highest percentage of marks?` ###
print('Maximum marks for each subject:67 \nNumber of Subjects:5')
topper_percent_in_top_four = ['x',0]
for in range(1,len(student_marks)):

"""----"""

# Sets
YouTubeVideo('https://www.youtube.com/watch?v=I6UH_prRboE&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=8',width=600,height=300)

"""# **`Sets`**
* Unordered collection of elements (if you put some data in order inside  set it will discard order)
    * It shorts elements by itself (see below example)
* No duplicates only unique values
    * Put duplicates in set it will auto remove them
* Mutable can add, remove values
* Set Theory operations are possible like Union,Intersection etc...
    * `intersection` of 2 sets => set_1.intersection(set_2)
    * `union` of 2 sets => set_1.union(set_2) ..
"""

# define set named as set_ with values 'b','c','a','z'
set_ = {'b', 'c','a', 'z'}
# print set
print(set_)

# define list namead as frt with elements as 'mango','banana','mango','banana'
frt = {'mango', 'banana', 'mango', 'banana'}
# define a set named as set_ with elements as 'mango','banana','mango','banana'
# print set
print(frt)

# make a set named as set_data and values as 4,'A',5,1,'V','L'
set_data = {4,'A',5,1,'V','L'}
# print set_data #<= results are shorted
print(set_data)

# No duplicates only unique values
# make a set named as set_data and values as 4,4,5,1,'V','V'
set_data = {4,4,5,1,'v', 'v'}
# print set_data
print(set_data)

# make tuple named  as tuple_data with values as 'A', 'B', 1, 2, 'B', 'A'
tuple_data = ('A','B',1,2,'B','A')
# make a variable names as var_1 and convert it into set 
var_1 = set(tuple_data)
# peint var_1
print(var_1)

# Defining a set using a List 
# define a list named as list_data with values as  'A', 'B', 1, 2, 'B', 'A'] # this is a list with duplicate data
list_data = ['A','B',1,2,'B','A']
# change set_from_list to  set # set will remove duplicates
set_from_list = set(list_data)
# print set_from_list)
print(set_from_list)
# Defining a set using a Tuple named as tuple_data with values as 'A', 'B', 1, 2, 'B', 'A'
tuple_data = ('A', 'B',1,2,'B','A')
# make variable named as set_from_tuple, change tuple_data into set
set_from_tuple = set(tuple_data)
# print set_from_tuple)
print(set_from_tuple)

# see set_from_tuple output
set_from_tuple

# add 0 to set_from_tuple
set_from_tuple.add(0)
# print set_from_tuple
print(set_from_tuple)

# make variable named as set_ with values as 'b','c','a','z'
set_ = {'b','c','a','z'}
# print set_
set_

# add x to set_
set_.add('x')
# print set_
set_

# Add 0 to set set_from_tuple
set_from_tuple.add(0)
# print set_from_tuple # 0 is added at the starting of set, as set orders by itself
print(set_from_tuple)

# adding C to set set_from_tuple
set_from_tuple.add('C')
# print set_from_tuple # c is added at the last of set, as set orders by itself
print(set_from_tuple)

"""# delete element from set"""

# see output of set_from_tuple
set_from_tuple

# use discard to remove 0 from set_from_tuple
set_from_tuple.discard(0)
# see output of set_from_tuple
set_from_tuple

# from set_from_tuple discard 9 
set_from_tuple.discard(9)
# print set_from_tuple
set_from_tuple

# delete element from set (two methods are as)
## discard() : if element not in set, it will not show error
## remove() : if element not in set, it will show error
set_from_tuple.discard(0.0)

"""# Difference b/w two set (set_1 - set_2)"""

# set_1 - set_2 => states that, collect every element of set_1 after removing thouse element which are common in set_1 and set_2 

# define a set named as set_1 with elements as 1,2,3,'A','B'
set_1 = {1,2,3,'A','B'}
# define a set named as set_2 with elements as 3,'A'
set_2 ={3,'A'}
# difference of set_1 and set_2
diff_between_set1_and_set2 = set_1-set_2
# see difference between set_1 and set_2)
print(diff_between_set1_and_set2)
# print set_1
print(set_1)

# if you want ot update set_1 by difference

# using difference_update update set_1 and set_2
set_1.difference_update(set_2)
# print set_1
set_1

"""# Intersection b/w two set (set_1 - set_2)"""

# collect only elements which are common b/w both sets
set_1 = {1,2,3,'A','B'}
set_2 = {3,'A'}
set_1.intersection(set_2)
set_1

# if you want ot update set_1 by intersection
set_1.intersection_update(set_2)
set_1

"""----"""

# Dict
YouTubeVideo('https://www.youtube.com/watch?v=I6UH_prRboE&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=7',width=600,height=300)

"""# **`Dictionary`** => `key:value`
* Unordered data structure
* Collection of multiple lists can say, looks like set{} but have {key:value} pairs for storing elements
    * student_information is a dictionay and it have name,age,email,adress etc store in form of list how see bellow example
* `Element of dictionary can only be acessed by using key not Index`
* Every key must be unique

`{} -> curly brac`
"""

# student details
names = ['Viranda','Sandhu','Rama','Yoga']
height = [120,130,140,150]
weight = [56,60,45,90]
age = [23,34,56,55]

"""
dict = { key:values }
"""

### storing all these 4 lists in a dict using key:value  # once data structure inside other
student_details_dict = {
    'names' : ['Viranda','Sandhu','Rama','Yoga'],
    'height' : [120,130,140,150],
    'weight' : [56,60,45,90],
    'age' : [23,34,56,55]
}

"""* Above name,height are the `key` and list's data are the `value pair` associated with the key
    * can say each key is mapped to multiple values
* Above is the representation of advanced data structure as you can see list inside a dictionary
"""

### Acessing elements of dict ###
student_details_dict = {
    'names' : ['Ohm','Sandhu','Rama','Yoga'],
    'height' : [120,130,140,150],
    'weight' : [56,60,45,90],
    'age' : [23,34,56,55]
}

# trying to acess using index will give error
student_details_dict[0]

student_details_dict['age']

student_details_dict

student_details_dict['names'][-1]

# trying to acess using key will give error

print(student_details_dict['names'],'\n')

#getting into name key values
print(student_details_dict['names'][1:])

### Acessing keys ###
student_details_dict.keys()

### Acessing values ###
student_details_dict.values()

"""# Adding single element to dictionary"""

student_details_dict

# dict_name['key_name'] = [values to update]
student_details_dict['emails'] = ['as@gmail.com','asd@gmail.com','d@gmail.com','sd@gmail.com']

student_details_dict

"""# Adding multiple element to dictionary """

student_details_dict

# use of .update({'key':[value],'key1':[value1]})

student_details_dict.update({'adress':['ana','dasd','asdad','adasd'],'sex':['m','m','m','m']})
student_details_dict

"""# Deleting element of dictionary"""

student_details_dict

# use of del
del student_details_dict['sex'] #<= removing sex key totaly from key
student_details_dict

"""# Updating dict with dicts"""

# Make a dict named as student_data_dictionary  with value which are given bellow as output
student_data_dictionary = {'age': 21,
                          'attendance': 74,
                          'city': 'Gurugram',
                          'country': 'India',
                          'name': 'Vany',
                          'percentage': 85,
                          'roll_no': 'CSE100'}

# print student_data_dictionary
student_data_dictionary

# update student_data_dictionary by observing output 
student_data_dictionary.update({'country': 'India',
 'last_name': 'Unicorn', 'pincode': 345467})
# print student_data_dictionary
student_data_dictionary

"""# Updating dict with list of tuples"""

# print student_data_dictionary

# update student_data_dictionary by observing output 

# print student_data_dictionary

# observe this code
### dictionary key can be anything string,integer,float,boolean ###
dict_sample = {
    'string' : 'string can be used as key',
    777 : 'interger can be used as key',
    777.77 : 'float can be used as key',
    False : 'boolean can be used as key'
}

dict_sample.keys()

"""Mostly String and Integer are used as key"""

dict_sample[777.77]

# observe this code
### Duplicate keys ###
# every key must be unique
dict_sample = {
    'a':1,
    'b':2,
    'c':3,
    'a':23
}

dict_sample

"""`If we add duplicate keys, it will not throw an error instead it will overwrite value which is added at last`

# Iterating through key:value pair
"""

dict_sample.items()

for key,value in dict_sample.items():
    print(key,value)

for key,value in dict_sample:
    print(key,value)

"""# sorting a dictionary based on keys"""

sorted(dict_sample.items())

# sorting a dictionary based on values
# it requires concept of lambda expresiion

"""---"""

# String Manipulation
YouTubeVideo('https://www.youtube.com/watch?v=I6UH_prRboE&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=9',width=600,height=300)

"""# **`String Manipulation`** [More Resources](https://docs.python.org/3.7/library/stdtypes.html#text-sequence-type-str)

# observe bellow code
"""

string_ = '' or "" or """ """

# defining a string
string = "We are creating next generation data science eco-system at CloudyML"
string

# length of string including spaces
len(string)

# Accessing characters in a string
string[0]

# Accessing characters with negative indexing
string[-1]

"""# String Slicing"""

string[:6]

string[7:-10]

"""# Count of a particular `character` in a string"""

print(string)

string.count('e')

"""# Count of a particular `sub-string` in a string """

print(string[7:-10])
string.count('ea')

"""# Find a substring in string using `find` and `index` function"""

string

# .find() => if present it will return starting index, not found then it will return -1
# .index() => if present it will return starting index, not found then it will give error


string.find('eaq')

string.index('eaq')

string

### Checking whether string `startswith` or `endswith` a particular substring or not ###
string.endswith('CloudyML')

string.startswith('We')

string

### Converting string to upper case ###
string.upper()

### Converting only first character of string to upper case ###
string.capitalize()

string

### Checking if string is in lower case or upper case ###
string.islower()

string.isupper()

### Checking if string is digit, alpabetic, alpha-numeric ###
"1".isnumeric()

"1s".isnumeric()

"name".isalpha()

"name777".isalpha()

"name777".isalnum()

string = 'Cloudy ML'
string.isalpha()

string = 'CloudyML'
string.isalpha()

str_ = "C++ is easy to learn"
str_

### Replacing substrings ###
str_.replace('C++', 'Python')

### using Split function ###
'Python is easy to learn'.split()

'Python is easy to learn'.split('easy')

"""<a id='14'></a><center> <h3 style="background-color:orange; color:white" ><br>Functions<br></h3>"""

# Funntion-1
YouTubeVideo('https://www.youtube.com/watch?v=cjtAbp-Ux-w&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=15',width=600,height=300)

# Funntion-2
YouTubeVideo('https://www.youtube.com/watch?v=cjtAbp-Ux-w&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=16',width=600,height=300)

"""* `Purpose of functions is to group some particular lines of code that needs to be executed multiple times`
    * keyword `def` introduces a function definition and it must be followed by function name
* Function is Reusable piece of code
* We create function to solve specific problem

def function_name():
    stetement(s)
"""

# define a function
greet = """
    This is to represent docstring, 
    optionsl documentation is a good 
    programming practice
    """
def welcome_message(name):
    print(greet)

# call a function with Mukesh and input
def welcome_to_course(student_name,course):
  print(f'{student_name} welcome to {course}')

welcome_to_course('Mukesh', 'Python Function')

#obseve the output
print(welcome_message.__doc__)

#obseve the output
print(print.__doc__)

"""* `def` Keyword marking start of function
* `function name` to uniquely identify function
    * `function naming` follows same `rules of writing identifiers`
* `parameters`(arguments) to pass values to a function => totally optional
* `()` paranthesis
* `colon (:)` start of function
* `documentation string`(docstring) describe's what function does => totally optional
* `return statement` returns a value from function => totally optional
* inside colon is `function definition` it should always be present before function call or get an error

# `Type of Functions`
|Built-in|User-Defined|Lambda Functions|Recursion Function
|----|----|---|---|
|`print()` | `add_two_number(defined by user i.e. you)`|``|``|
|`range()` | ``|``|``|
| `append()`|`` |``|``|
| `extend()`|`` |``|``|
"""

### using print ###
# function to add two number which are as 3 and 4
def two_number_addition(num1, num2):
    total = num1+num2
    print(total)
  
 # in total variable store adition of 3 + 4
  # print total variable 
two_number_addition(3,4)

### using return ###
def two_number_addition_with_return():
    total = 3 + 4
    return (total) #returning value of total


# observe output

print_output = two_number_addition(3,4)

# see this variable cannot store above value as value was not saved
print_output

"""See above variable cannot store above value as return was not used in fucntion, so every calculation is being done inside the function two_number_addition() and if you come out of function thouse value do not exist, to solv this problem we use `return`, after using return we can store output of function for other use in our program"""

return_output = two_number_addition_with_return()

# as return was used in two_number_addition_with_return() function so we can take out value 
return_output

"""Here in above code value to funtion is being returned and we are saving that returned value to a variable return_output for maybee any other further use.

# **`Passing Parameters to function`**
"""

# defining a function
def welcome_message(name):
    return 'Welcome to Python Funcions!! ' + name
    
# calling function in python with name Akash
welcome_message('Akash')

# reusing above function (see it as a login windo of a website)
welcome_message('Krishna')

"""# ***`Passing Default Parameter value to function`*** <br>
Works in case you dont provide any value to the required parameter
* This is good practice to provide default value to a parameter
    * As it reduces many errors
"""

def welcome_message(name='Learner'):
    return 'Welcome to Python Funcions!! ' + name
    
# calling function in python
welcome_message('Akash')

# not providing parameter value, now it will take default one i.e. Learner
welcome_message()

"""# ***`Positional Arguments`*** 
Most arguments are identified by their position in function call
* Say `print(x,y)` will give different results from `print(y,x)`

What ever sequence is given while defining a function values must be taken in that sequence only
* Otherwise use argument name **`(keyword arguments)`** to take values
* We first define `positional argument` and then `keyword arguments`

"""

#### Observe every output from here onwords #####

def substraction_function(small_number,large_number):
    difference = large_number - small_number
    return difference

# passing arguments in right order
substraction_function(7,84)

# passing arguments in wrong order (produces negative result)
substraction_function(84,7)

# always pass arguments using there name(keyword arguments) then order does not matter
substraction_function(large_number=84,small_number=7)

# defining positional argument and then keyword arguments => valid in python
substraction_function(7,large_number=84)

# defining keyword arguments and then positional argument => not vaid in python
substraction_function(large_number=84,7)

"""# ***`Variable Length Arguments`***
Used when we need more flexibility while defining functions like we don't know in advance fixed number of arguments
* Python allows us to make function calls with variable length arguments
* In argument use an **(*)** astrick sign before argument
"""

##### Observe code from here ######

# defining a randome function using (*args)
def arguments_function(*args):  # => used for positional arguments will variable lengths
    for i in args:
        print(i)

# passing n-number of positional arguments to fucntion as we are using (*args)
arguments_function(1,2,3,4,5)

"""* Everything given to function if it is using *args, arguments will be saved as `tuples`"""

#### Observe every output from here onwords #####
# defining a randome function using (**kwargs)

def keyword_arguments_function(**kwargs): # => used for keyword arguments will variable lengths
    for key,value in kwargs.items():
        print(key,value)

# passing n-number of keyword arguments to fucntion as we are using (*args)
keyword_arguments_function(a=1,b=2,c=3,d=4,e=5)

"""* Everything given to function if it is using *kwargs, arguments will be saved as `dict`

# ***`Scope of Variables`*** means that part of program where we can access particular variable
* `Local Variable` => variables defined inside a function and can be only accessed from inside of that particular function
* `Global Variable` => variables defined outside a function and can be accessed throughout program

Let's define a global variable, `"global_variable"` outside function
* We will return its value using a function `"randome_function"` and see that we would be able to access its value using that function also
"""

#### Observe every output from here onwords #####
# defining a global variable
global_variable = 'variable outside of function'

# defining function
def random_function():
    # accessing variable which is outside of this function
    return global_variable

random_function()

"""`See we can acess the data of golbal variable from Inside of the Function`

# **`=> Let's see what will happen if we try to change value of global variable from Inside of the Function`**
"""

#### Observe every output from here onwords #####
# defining a global variable
global_variable = 'variable outside of function'

# defining function
def random_function():
    # changing value of global variable from inside of the function
    global_variable = 'changing variable outside of function from inside of function'
    # accessing variable which is outside of this function
    return global_variable

print(random_function())
print(global_variable)

"""It does not mean that we can change global variable from inside the function but this is somthing different story going on here:
* function named as random_function()'s, global_variable have limited scope which is only of inside its function, that is why when we print function it returns the local variable value not the changed global variable value 
* variable defined locally is taking precedence over variable defined globally as there name are same

The only shortcomming with local variable is it stayes inside the function, the minute you come out of function you dont get the updated value <br>
So in above code we are not abble to change global variable locally, but we have made a new variable which is only working inside of the function. <br>
Approach we shoudl follow is given bellow:

# **`Updating value of global variable from inside of any user_defined function using  Global Keyword`** <br>
`global` keyword tells program that there is no need to make a new variable locally but the variable we are using locally is a global variable, which has benn defined
"""

#### Observe every output from here onwords #####
# defining a global variable
global_variable = 'variable outside of function'

# defining function
def random_function():
    # telling function which variables is/are global
    global global_variable
    # changing value of global variable from inside of the function
    global_variable = 'changing variable outside of function from inside of function'
    # accessing variable which is outside of this function
    return global_variable

print(random_function())
print(global_variable)

"""<a id='15'></a><center> <h3 style="background-color:orange; color:white" ><br>Lambda Expressions<br></h3>

`Lambda function can have any number of arguments but only one expression, which is evaluated and returned`
* `Lambda Functions` are syntactically restricted to a single expression
* More efficient than function when task of  function is small
* Do not use Lambda functions when task is complex
* It works best when you have to call a function more of times but execution task is simple

`Write a regular function instead of a lambda when function is to be used multiple times`
* `Key`= Lambda must be used once
* Lambdas are supposed to be used for just once and thus there is no reason to assign a lambda to a variable.
* Major reason for avoiding assigning a lambda to a variable is for debugging/maintainability purposes, especially in a production/teamwork environment


* Use of function is good choice when assignment of variable is compulsary 
* While debugging if any error accurs it will point out to the function creating error
* In case of lambda function it will throw `lambda error` and ther can be many lambda in out code which makes is difficult to debug error
"""

# define a function that adds 100 to number that is passed as an argument
add_100 = lambda x:x+100
add_100(1)

# lambda function named as increaseBy_100 that adds 100 to number that is passed as an argument
increaseBy_100 = lambda x:x+100

# print value for increaseBy_100(1), using f string
print(f'Value of 1: {increaseBy_100(1)}')
# print value for increaseBy_100(22), using f string
print(f'Value of 1: {increaseBy_100(22)}')

"""# **`Lambda function with two arguments`**"""

# write a lambda fucntion named as subtract_two_number which can take any two number as input and subtract thouse two number
subtract_two_number = lambda x,y:x-y
a,b = int(input('a: ')),int(input('b: '))
subtract_two_number(a,b)

"""# ***`filter() function`*** takes in a function and a list as arguments <br>
`It filters out all elements of a sequence, for which function returns True`
"""

#### Observe every output from here onwords #####
# function to check if given number is even 
def divisible_two(x):
    if x%2 == 0:
        return True #odd 
    else:
        return False #not odd
    
# given list to filter for odd number
check_list = [4,8,0,11,456,777,999,777]

#### Observe every output from here onwords #####
odd_number_filtered_list = list(filter(divisible_two,check_list))
odd_number_filtered_list

# writing lambda function for above code (we need not to define function sepratly)
odd_number_filtered_list_using_lambda = list(filter(lambda x:(x%2==0),check_list))
odd_number_filtered_list_using_lambda

"""How easy lamda can make our task now understand

# ***`map() function`*** takes in a function and a list as argument
* Function is called with a lambda function and a list
* A new list is returned which contains all lambda modified items returned by that function for each item
"""

#### Observe every output from here onwords #####
check_list = [4,8,0,11,456,777,999,777]

#increse every element of check_list by 4
mapped_check_list = list(map(lambda x:x*4,check_list ))
mapped_check_list

#### Observe every output from here onwords #####
check_list = ['north','see','king','himalayas','east']
# capatilize first letter of each  word in the original list
mapped_check_list = list(map(lambda x: x[0].upper()+x[1:],check_list)) 
mapped_check_list

"""# **`reduce() Function`** takes in a function and a list as argument
* The function is called with a lambda function and a list
* A new reduced result is returned
* This performs a repetitive operation over pairs of list

`Reduce Function will always take two parameters`
"""

#### Observe every output from here onwords #####
#importing reduce using functools
from functools import reduce


check_list = [4,8,0,11,456,777,999,777]
#using reduce function to find sum of numbers in check_list
sum_of_list = reduce((lambda x, y : x + y),check_list) 
sum_of_list

#### Observe every output from here onwords #####
check_list = [4,8,0,11,456,777,999,777]
#using reduce function to find largest number in check_list
largest_number = reduce((lambda x, y: x if (x > y) else y ),check_list) 
largest_number

"""<a id='16'></a><center> <h3 style="background-color:orange; color:white" ><br>Comprehensions<br></h3>"""

# Comprehensions
YouTubeVideo('https://www.youtube.com/watch?v=Cs8wG--s4z4&list=PLsR_0x6BuM-HJZT6Xzj-088N4hN3KsDME&index=17',width=600,height=300)

"""## **BELOW CODE IS GIVEN FOR YOU TO OBSERVE HOW COMPREHENSIONS WORK.**

# **`Type of Comprehensions`**:
1. `List Comprehension`
2. `Set Comprehension` 
3. `Dict Comprehension`

# 1. List Comprehension
`Syntex:`

**[expression for item in iterable]**


**Expanded Form**<br>
for item in iterable: <br>
....expression

**`Converet all element of below tuple in upper case and change datatype into list`**
"""

animals = ('bird', 'snake', 'dog', 'turtle', 'cat', 'hamster')
type(animals)

# good => way using list comprehension

[x.upper()for x in animals]

# Not Good way => using list comprehension
animalss = []
for x in animals:
    animalss.append(x.upper())
animalss

"""# List Comprehension for Conditional statement or For Filtering</b>

`Syntex:`

**[expression `for` item in iterable `if` some_condition]**

`Expended Form:`

`for` item in iterable:
<br>___    `if` some_condition:
<br>________        expression 
"""

#find the prime number and square them

primes = [2,3,4,5,6,8,7,9]

# good
[x*x for x in primes if x%2 == 0]

# not good
ls = []
for x in primes:
    if x % 2 == 0:
        ls.append(x*x)
ls

"""**`For more complex conditions we can use function along with`**"""

#find from below given animal which have 4 leags 

animals = ('bird','snake','dog','turtle','cat','hamster')

# good
def has_4_legs(animal):
    return animal in ('dog','turtle','cat')

[x for x in animals if has_4_legs(x)]

# not good
l = []
for x in animals:
    if has_4_legs(x):
        l.append(x)
l

"""# 2. Set Comprehension
* Set have unique element
* Only use curly bracket then that of square bracket

`Syntax:`

**{expression `for` item in iterable}**
"""

# find odds
numbers_set = (1, 34, 5, 8, 10, 12, 3, 90, 70, 70, 90)

unique_even_numbers = {number for number in numbers_set if number%2 == 0}
unique_even_numbers

"""# 3. Dict Comprehension
`Syntax:`

**{key_expression : value_expression `for` item in iterable}**
"""

words = ('python', 'is', 'a', 'big', 'snake')

len_words = {word : len(word) for word in words}
len_words

# acessing key which start with p letter
len_words_p = {word : len(word) for word in words if word.startswith('p')}
len_words_p

"""<a id='17'></a><center> <h3 style="background-color:orange; color:white" ><br>Enumerate<br></h3>

Used for efficient looping
* Use enumerate function when `needed an index` while looping
* Often used in list comprehensions or for loops and does not spit out tuples itself
* Enumerate is an `iterator`, this means ``nothing gets stored``
* Processes only one item at a time
* This can be useful when you have large datasets/files.

`Syntax:` <br>
**enumerate(iterable, start)**
**<br>_____start = starting index**
* `Returns a tuple of type (index,values)`

Whenever you see within your code `range(len(..))` there is a better way to loop than through using an index
* This is where built-in function `Enumerate` can help

# Enumerate Working
* Enumerate built-in function assigns an index to every item in an itterable object
* This could be a set, list, string anything that can be iterated over
"""

colors = ['red','green','blue','purple']
print(enumerate(colors))

#enumerate gives us index which starts from 0
for index,start in enumerate(colors):
    print(index,start)

# index starting from 1 maybee
for index,start in enumerate(colors,start=1):
    print(index,start)

"""In above code we define variables index and item and they get assigned to first and second items of each tuple 
* This is called `sequence unpacking`
* We then print index and item of items object
"""

# using Enumerate to skip over one index
for index,start in enumerate(colors,start=1):
    if index == 3: # skipping index 3 
        continue
    print(index,start)

"""
# FeedBack
We hope youâ€™ve enjoyed this course so far. Weâ€™re committed to help you use "AI for All" course to its full potential, so that you have a great learning experience. And thatâ€™s why we need your help in form of a feedback here.

Please fill this feedback form https://docs.google.com/forms/d/e/1FAIpQLSfjBmH0yJSSA34IhSVx4h2eDMgOAeG4Dk-yHid__NMTk3Hq5g/viewform"""